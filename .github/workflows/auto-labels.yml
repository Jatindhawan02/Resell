const issue = context.payload.issue;
const issueBody = issue.body;
const labelsToAdd = new Set(["bug"]); // Default label

// Debugging: Print full issue body to check formatting
console.log("Issue Body:", issueBody);

// Extract selected values using flexible regex
const severityMatch = issueBody.match(/Severity[:\*\s]*\n*(.+)/i);
const priorityMatch = issueBody.match(/Priority[:\*\s]*\n*(.+)/i);
const statusMatch = issueBody.match(/Status[:\*\s]*\n*(.+)/i);

// Clean extracted values
const severity = severityMatch ? severityMatch[1].trim() : null;
const priority = priorityMatch ? priorityMatch[1].trim() + " Priority" : null;
const status = statusMatch ? statusMatch[1].trim() : null;

// Add valid labels
if (severity) labelsToAdd.add(severity);
if (priority) labelsToAdd.add(priority);
if (status) labelsToAdd.add(status);

console.log("Labels to add:", Array.from(labelsToAdd)); // Debugging

// Apply labels to the issue
github.rest.issues.addLabels({
  owner: context.repo.owner,
  repo: context.repo.repo,
  issue_number: issue.number,
  labels: Array.from(labelsToAdd)
});

// Debugging: Ensure this comment is not inside an object or function call
console.log("Label application completed successfully!");
