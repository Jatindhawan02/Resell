const issue = context.payload.issue;
const issueBody = issue.body;
const labelsToAdd = new Set(["bug"]); // Default label

// Debugging - Print full issue body to check formatting
console.log("Issue Body:", issueBody);

// Extract selected values using flexible regex
const severityMatch = issueBody.match(/Severity[:*\s]*\n*(.+)/i);
const priorityMatch = issueBody.match(/Priority[:*\s]*\n*(.+)/i);
const statusMatch = issueBody.match(/Status[:*\s]*\n*(.+)/i);

// Debugging - Check if regex matches correctly
console.log("Severity Match:", severityMatch ? severityMatch[1] : "Not found");
console.log("Priority Match:", priorityMatch ? priorityMatch[1] : "Not found");
console.log("Status Match:", statusMatch ? statusMatch[1] : "Not found");

// Clean extracted values, ensuring no null values
const severity = severityMatch ? severityMatch[1].trim() : "";
const priority = priorityMatch ? priorityMatch[1].trim() + " Priority" : "";
const status = statusMatch ? statusMatch[1].trim() : "";

// Add valid labels (only non-empty values)
if (severity) labelsToAdd.add(severity);
if (priority) labelsToAdd.add(priority);
if (status) labelsToAdd.add(status);

console.log("Labels to add:", Array.from(labelsToAdd)); // Debugging

// Apply labels to the issue
github.rest.issues.addLabels({
  owner: context.repo.owner,
  repo: context.repo.repo,
  issue_number: issue.number,
  labels: Array.from(labelsToAdd)
}).then(() => {
  console.log("Labels applied successfully!");
}).catch((error) => {
  console.error("Error applying labels:", error);
});
